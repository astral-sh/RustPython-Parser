---
source: parser/src/lexer_v2/mod.rs
expression: tokens
---
[
    Token {
        kind: NonLogicalNewline,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comment,
        length: 21,
        value: String(
            "# case test_patma_098",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Match,
        length: 5,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Identifier,
        length: 1,
        value: String(
            "x",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Colon,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Newline,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Indent,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Case,
        length: 4,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Minus,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Complex,
        length: 2,
        value: String(
            "0",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Colon,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Newline,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Indent,
        length: 8,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Identifier,
        length: 1,
        value: String(
            "y",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Equal,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Whitespace,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Int,
        length: 1,
        value: String(
            "0",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Newline,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Comment,
        length: 21,
        value: String(
            "# case test_patma_142",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: NonLogicalNewline,
        length: 1,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Dedent,
        length: 0,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Dedent,
        length: 0,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Identifier,
        length: 1,
        value: String(
            "y",
        ),
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: Newline,
        length: 0,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
    Token {
        kind: EndOfFile,
        length: 0,
        value: None,
        flags: TokenFlags(
            0x0,
        ),
    },
]
